{"ast":null,"code":"import { delay, all, fork, takeLatest, put } from \"redux-saga/effects\";\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, LOAD_POST_REQUEST, LOAD_POST_SUCCESS, LOAD_POST_FAILURE } from '../reducers/post';\nimport { ADD_POST_TO_ME, REMOVE_POST_TO_ME } from \"../reducers/user\";\nimport shortId from 'shortid';\n\nfunction addPostAPI(data) {\n  return axios.post('/api/addPost', data);\n}\n\nfunction* addPost(action) {\n  try {\n    // const result = yield call(addPostAPI, action.data)\n    yield delay(1000);\n    const id = shortId.generate();\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: {\n        id,\n        content: action.data\n      }\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: id\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction removePostAPI(data) {\n  return axios.post('/api/addPost', data);\n}\n\nfunction* removePost(action) {\n  try {\n    // const result = yield call(addPostAPI, action.data)\n    yield delay(1000);\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: action.data\n    });\n    yield put({\n      type: REMOVE_POST_TO_ME,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction addCommentAPI(data) {\n  return axios.post('/api/addPost', data);\n}\n\nfunction* addComment(action) {\n  try {\n    // const result = yield call(addPostAPI, action.data)\n    yield delay(1000);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction loadPostAPI(data) {\n  return axios.get('/api/addPost', data);\n}\n\nfunction* loadPost(action) {\n  try {\n    // const result = yield call(addPostAPI, action.data)\n    yield delay(1000);\n    yield put({\n      type: LOAD_POST_SUCCESS,\n      data: getDemmuyPost(10)\n    });\n  } catch (err) {\n    yield put({\n      type: LOAD_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction* watchLoadPost() {\n  yield takeLatest(LOAD_POST_REQUEST, loadPost);\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction* watchCommentPost() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchCommentPost), fork(watchRemovePost), fork(watchLoadPost)]);\n}","map":{"version":3,"names":["delay","all","fork","takeLatest","put","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","LOAD_POST_REQUEST","LOAD_POST_SUCCESS","LOAD_POST_FAILURE","ADD_POST_TO_ME","REMOVE_POST_TO_ME","shortId","addPostAPI","data","axios","post","addPost","action","id","generate","type","content","err","response","removePostAPI","removePost","addCommentAPI","addComment","loadPostAPI","get","loadPost","getDemmuyPost","watchLoadPost","watchAddPost","watchRemovePost","watchCommentPost","postSaga"],"sources":["C:/Users/user/Desktop/react-nodebird/prepare/front/sagas/post.js"],"sourcesContent":["import { delay, all, fork, takeLatest, put } from \"redux-saga/effects\";\r\nimport {\r\n    ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE,\r\n    REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE,\r\n    ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE,\r\n    LOAD_POST_REQUEST, LOAD_POST_SUCCESS, LOAD_POST_FAILURE\r\n} from '../reducers/post'\r\n\r\nimport { ADD_POST_TO_ME, REMOVE_POST_TO_ME } from \"../reducers/user\";\r\n\r\nimport shortId from 'shortid';\r\n\r\nfunction addPostAPI(data) {\r\n    return axios.post('/api/addPost', data)\r\n}\r\n\r\nfunction* addPost(action) {\r\n    try {\r\n        // const result = yield call(addPostAPI, action.data)\r\n        yield delay(1000)\r\n        const id = shortId.generate();\r\n        yield put({\r\n            type: ADD_POST_SUCCESS,\r\n            data: { id, content: action.data }\r\n        })\r\n        yield put({\r\n            type: ADD_POST_TO_ME,\r\n            data: id\r\n        })\r\n    } catch (err) {\r\n        yield put({\r\n            type: ADD_POST_FAILURE,\r\n            data: err.response.data\r\n        });\r\n    }\r\n}\r\n\r\nfunction removePostAPI(data) {\r\n    return axios.post('/api/addPost', data)\r\n}\r\n\r\nfunction* removePost(action) {\r\n    try {\r\n        // const result = yield call(addPostAPI, action.data)\r\n        yield delay(1000)\r\n        yield put({\r\n            type: REMOVE_POST_SUCCESS,\r\n            data: action.data\r\n        })\r\n        yield put({\r\n            type: REMOVE_POST_TO_ME,\r\n            data: action.data\r\n        })\r\n    } catch (err) {\r\n        yield put({\r\n            type: REMOVE_POST_FAILURE,\r\n            data: err.response.data\r\n        });\r\n    }\r\n}\r\n\r\nfunction addCommentAPI(data) {\r\n    return axios.post('/api/addPost', data)\r\n}\r\n\r\nfunction* addComment(action) {\r\n    try {\r\n        // const result = yield call(addPostAPI, action.data)\r\n        yield delay(1000)\r\n        yield put({\r\n            type: ADD_COMMENT_SUCCESS,\r\n            data: action.data\r\n        });\r\n    } catch (err) {\r\n        yield put({\r\n            type: ADD_COMMENT_FAILURE,\r\n            data: err.response.data\r\n        });\r\n    }\r\n}\r\n\r\nfunction loadPostAPI(data) {\r\n    return axios.get('/api/addPost', data)\r\n}\r\n\r\nfunction* loadPost(action) {\r\n    try {\r\n        // const result = yield call(addPostAPI, action.data)\r\n        yield delay(1000)\r\n        yield put({\r\n            type: LOAD_POST_SUCCESS,\r\n            data: getDemmuyPost(10)\r\n        });\r\n    } catch (err) {\r\n        yield put({\r\n            type: LOAD_POST_FAILURE,\r\n            data: err.response.data\r\n        });\r\n    }\r\n}\r\n\r\nfunction* watchLoadPost() {\r\n    yield takeLatest(LOAD_POST_REQUEST, loadPost)\r\n}\r\n\r\nfunction* watchAddPost() {\r\n    yield takeLatest(ADD_POST_REQUEST, addPost)\r\n}\r\n\r\nfunction* watchRemovePost() {\r\n    yield takeLatest(REMOVE_POST_REQUEST, removePost)\r\n}\r\n\r\nfunction* watchCommentPost() {\r\n    yield takeLatest(ADD_COMMENT_REQUEST, addComment)\r\n}\r\n\r\n\r\nexport default function* postSaga() {\r\n    yield all([\r\n        fork(watchAddPost),\r\n        fork(watchCommentPost),\r\n        fork(watchRemovePost),\r\n        fork(watchLoadPost),\r\n    ]);\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}