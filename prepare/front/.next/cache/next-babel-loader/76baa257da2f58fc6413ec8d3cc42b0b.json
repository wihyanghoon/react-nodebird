{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\Desktop\\\\react-nodebird\\\\prepare\\\\front\\\\components\\\\PostForm.js\";\nvar __jsx = React.createElement;\nimport React, { useEffect } from 'react';\nimport { Form, Input, Button } from 'antd';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useState } from 'react';\nimport { useCallback } from 'react';\nimport { useRef } from 'react';\nimport { UPLOAD_IMAGES_REQUEST, REMOVE_IMAGES_SUCSESS, ADD_POST_REQUEST } from '../reducers/post';\n\nconst PostForm = () => {\n  const {\n    imagePath,\n    addPostLoadding,\n    addPostDone\n  } = useSelector(state => state.post);\n  const imageInput = useRef();\n  const {\n    0: text,\n    1: setText\n  } = useState(\"\");\n  const dispatch = useDispatch();\n  useEffect(() => {\n    if (addPostDone) {\n      setText('');\n    }\n  }, [addPostDone]);\n  const onChangeText = useCallback(e => {\n    setText(e.target.value);\n  }, []);\n  const onSubmit = useCallback(() => {\n    if (!text || !text.trim()) {\n      return alert('게시글을 작성하세요.');\n    }\n\n    const formData = new FormData();\n    imagePath.forEach(p => {\n      formData.append('image', p);\n    });\n    formData.append('content', text);\n    console.log(formData.text);\n    return dispatch({\n      type: ADD_POST_REQUEST,\n      data: formData\n    });\n  }, [text, imagePath]);\n  const onClickImageUpload = useCallback(() => {\n    imageInput.current.click();\n  }, [imageInput.current]);\n  const removeImage = useCallback(index => () => {\n    dispatch({\n      type: REMOVE_IMAGES_SUCSESS,\n      data: index\n    });\n  }, []);\n  const onChangeImages = useCallback(e => {\n    const imagesData = new FormData();\n    [].forEach.call(e.target.files, f => {\n      imagesData.append('image', f);\n    });\n    dispatch({\n      type: UPLOAD_IMAGES_REQUEST,\n      data: imagesData\n    });\n  }, []);\n  return __jsx(Form, {\n    encType: \"multipart/form-data\",\n    onFinish: onSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }\n  }, __jsx(Input.TextArea, {\n    value: text,\n    onChange: onChangeText,\n    maxLength: 140,\n    placeholder: \"\\uC5B4\\uB5A0\\uD55C \\uC77C\\uC774 \\uC788\\uC5C8\\uB098\\uC694?\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }\n  }), __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }\n  }, __jsx(\"input\", {\n    type: \"file\",\n    name: \"image\",\n    multiple: true,\n    hidden: true,\n    ref: imageInput,\n    onChange: onChangeImages,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 17\n    }\n  }), __jsx(Button, {\n    onClick: onClickImageUpload,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 17\n    }\n  }, \"\\uC774\\uBBF8\\uC9C0 \\uC5C5\\uB85C\\uB4DC\"), __jsx(Button, {\n    type: \"primary\",\n    style: {\n      float: \"right\"\n    },\n    htmlType: \"submit\",\n    loading: addPostLoadding,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 17\n    }\n  }, \"\\uC9F9\\uC9F9\")), __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }\n  }, imagePath.map((item, index) => __jsx(\"div\", {\n    key: item,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 21\n    }\n  }, __jsx(\"img\", {\n    src: `http://localhost:3065/${item}`,\n    alt: item,\n    style: {\n      width: '200px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 25\n    }\n  }), __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 25\n    }\n  }, __jsx(Button, {\n    onClick: removeImage(index),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 29\n    }\n  }, \"\\uC81C\\uAC70\"))))));\n};\n\nexport default PostForm;","map":{"version":3,"names":["React","useEffect","Form","Input","Button","useSelector","useDispatch","useState","useCallback","useRef","UPLOAD_IMAGES_REQUEST","REMOVE_IMAGES_SUCSESS","ADD_POST_REQUEST","PostForm","imagePath","addPostLoadding","addPostDone","state","post","imageInput","text","setText","dispatch","onChangeText","e","target","value","onSubmit","trim","alert","formData","FormData","forEach","p","append","console","log","type","data","onClickImageUpload","current","click","removeImage","index","onChangeImages","imagesData","call","files","f","float","map","item","width"],"sources":["C:/Users/user/Desktop/react-nodebird/prepare/front/components/PostForm.js"],"sourcesContent":["import React, { useEffect } from 'react'\r\nimport { Form, Input, Button } from 'antd'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { useState } from 'react';\r\nimport { useCallback } from 'react';\r\nimport { useRef } from 'react';\r\nimport { UPLOAD_IMAGES_REQUEST, REMOVE_IMAGES_SUCSESS, ADD_POST_REQUEST } from '../reducers/post'\r\n\r\nconst PostForm = () => {\r\n    const { imagePath, addPostLoadding, addPostDone } = useSelector((state) => state.post);\r\n    const imageInput = useRef();\r\n    const [text, setText] = useState(\"\");\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        if (addPostDone) {\r\n            setText('')\r\n        }\r\n    }, [addPostDone])\r\n\r\n    const onChangeText = useCallback((e) => {\r\n        setText(e.target.value)\r\n    }, [])\r\n\r\n    const onSubmit = useCallback(() => {\r\n        if (!text || !text.trim()) {\r\n            return alert('게시글을 작성하세요.');\r\n        }\r\n        const formData = new FormData();\r\n        imagePath.forEach((p) => {\r\n            formData.append('image', p);\r\n        });\r\n        formData.append('content', text);\r\n        console.log(formData.text)\r\n        return dispatch({\r\n            type: ADD_POST_REQUEST,\r\n            data: formData,\r\n        });\r\n    }, [text, imagePath]);\r\n\r\n    const onClickImageUpload = useCallback(() => {\r\n        imageInput.current.click();\r\n    }, [imageInput.current])\r\n\r\n    const removeImage = useCallback((index) => () => {\r\n        dispatch({\r\n            type: REMOVE_IMAGES_SUCSESS,\r\n            data: index\r\n        })\r\n    }, [])\r\n\r\n    const onChangeImages = useCallback((e) => {\r\n        const imagesData = new FormData();\r\n        [].forEach.call(e.target.files, (f) => {\r\n            imagesData.append('image', f)\r\n        })\r\n        dispatch({\r\n            type: UPLOAD_IMAGES_REQUEST,\r\n            data: imagesData,\r\n        })\r\n    }, [])\r\n    return (\r\n        <Form encType='multipart/form-data' onFinish={onSubmit}>\r\n            <Input.TextArea\r\n                value={text}\r\n                onChange={onChangeText}\r\n                maxLength={140}\r\n                placeholder='어떠한 일이 있었나요?'\r\n            />\r\n            <div>\r\n                <input type=\"file\" name='image' multiple hidden ref={imageInput} onChange={onChangeImages} />\r\n                <Button onClick={onClickImageUpload}>이미지 업로드</Button>\r\n                <Button type=\"primary\" style={{ float: \"right\" }} htmlType=\"submit\" loading={addPostLoadding}>짹짹</Button>\r\n            </div>\r\n            <div>\r\n                {imagePath.map((item, index) => (\r\n                    <div key={item}>\r\n                        <img src={`http://localhost:3065/${item}`} alt={item} style={{ width: '200px' }} />\r\n                        <div>\r\n                            <Button onClick={removeImage(index)}>제거</Button>\r\n                        </div>\r\n                    </div>\r\n                ))}\r\n            </div>\r\n        </Form>\r\n    )\r\n}\r\n\r\nexport default PostForm"],"mappings":"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"},"metadata":{},"sourceType":"module"}