{"ast":null,"code":"import { delay, all, fork, takeLatest, put, throttle, call } from \"redux-saga/effects\";\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, LOAD_POSTS_FAILURE, LIKE_POST_REQUEST, LIKE_POST_SUCCESS, LIKE_POST_FAILURE, UNLIKE_POST_REQUEST, UNLIKE_POST_SUCCESS, UNLIKE_POST_FAILURE } from '../reducers/post';\nimport { ADD_POST_TO_ME, REMOVE_POST_TO_ME } from \"../reducers/user\";\nimport axios from \"axios\";\nimport shortId from 'shortid';\n\nfunction addPostAPI(data) {\n  return axios.post('/post', {\n    content: data\n  });\n}\n\nfunction* addPost(action) {\n  try {\n    const result = yield call(addPostAPI, action.data);\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: result.data\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: result.data.id\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: ADD_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction removePostAPI(data) {\n  return axios.delete(`/post/${data}`);\n}\n\nfunction* removePost(action) {\n  try {\n    const result = yield call(removePostAPI, action.data);\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: result.data\n    });\n    yield put({\n      type: REMOVE_POST_TO_ME,\n      data: result.data.PostId\n    });\n    console.log(data);\n  } catch (err) {\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(`/post/${data.postId}/comment`, data);\n}\n\nfunction* addComment(action) {\n  try {\n    const result = yield call(addCommentAPI, action.data);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction loadPostsAPI(data) {\n  return axios.get('/posts', data);\n}\n\nfunction* loadPosts(action) {\n  try {\n    const result = yield call(loadPostsAPI, action.data);\n    yield put({\n      type: LOAD_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LOAD_POSTS_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction likePostAPI(data) {\n  return axios.patch(`/post/${data}/like `, data);\n}\n\nfunction* likePost(action) {\n  try {\n    const result = yield call(likePostAPI, action.data);\n    yield put({\n      type: LIKE_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LIKE_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction UnLikePostAPI(data) {\n  return axios.delete(`/post/${data}/like`);\n}\n\nfunction* UnLikePost(action) {\n  try {\n    const result = yield call(UnLikePostAPI, action.data);\n    yield put({\n      type: UNLIKE_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: UNLIKE_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction* watchLoadPosts() {\n  yield throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction* watchCommentPost() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nfunction* watchLikePost() {\n  yield takeLatest(LIKE_POST_REQUEST, likePost);\n}\n\nfunction* watchUnLiketPost() {\n  yield takeLatest(UNLIKE_POST_REQUEST, UnLikePost);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchCommentPost), fork(watchRemovePost), fork(watchLoadPosts), fork(watchLikePost), fork(watchUnLiketPost)]);\n}","map":{"version":3,"names":["delay","all","fork","takeLatest","put","throttle","call","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","LIKE_POST_FAILURE","UNLIKE_POST_REQUEST","UNLIKE_POST_SUCCESS","UNLIKE_POST_FAILURE","ADD_POST_TO_ME","REMOVE_POST_TO_ME","axios","shortId","addPostAPI","data","post","content","addPost","action","result","type","id","err","console","error","response","removePostAPI","delete","removePost","PostId","log","addCommentAPI","postId","addComment","loadPostsAPI","get","loadPosts","likePostAPI","patch","likePost","UnLikePostAPI","UnLikePost","watchLoadPosts","watchAddPost","watchRemovePost","watchCommentPost","watchLikePost","watchUnLiketPost","postSaga"],"sources":["C:/Users/user/Desktop/react-nodebird/prepare/front/sagas/post.js"],"sourcesContent":["import { delay, all, fork, takeLatest, put, throttle, call } from \"redux-saga/effects\";\r\nimport {\r\n    ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE,\r\n    REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE,\r\n    ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE,\r\n    LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, LOAD_POSTS_FAILURE,\r\n    LIKE_POST_REQUEST, LIKE_POST_SUCCESS, LIKE_POST_FAILURE,\r\n    UNLIKE_POST_REQUEST, UNLIKE_POST_SUCCESS, UNLIKE_POST_FAILURE\r\n} from '../reducers/post'\r\n\r\nimport { ADD_POST_TO_ME, REMOVE_POST_TO_ME } from \"../reducers/user\";\r\nimport axios from \"axios\";\r\nimport shortId from 'shortid';\r\n\r\nfunction addPostAPI(data) {\r\n    return axios.post('/post', { content: data });\r\n}\r\n\r\nfunction* addPost(action) {\r\n    try {\r\n        const result = yield call(addPostAPI, action.data);\r\n        yield put({\r\n            type: ADD_POST_SUCCESS,\r\n            data: result.data,\r\n        });\r\n        yield put({\r\n            type: ADD_POST_TO_ME,\r\n            data: result.data.id,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: ADD_POST_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction removePostAPI(data) {\r\n    return axios.delete(`/post/${data}`)\r\n}\r\n\r\nfunction* removePost(action) {\r\n    try {\r\n        const result = yield call(removePostAPI, action.data)\r\n        yield put({\r\n            type: REMOVE_POST_SUCCESS,\r\n            data: result.data\r\n        })\r\n        yield put({\r\n            type: REMOVE_POST_TO_ME,\r\n            data: result.data.PostId,\r\n        })\r\n        console.log(data)\r\n    } catch (err) {\r\n        yield put({\r\n            type: REMOVE_POST_FAILURE,\r\n            data: err.response.data\r\n        });\r\n    }\r\n}\r\n\r\nfunction addCommentAPI(data) {\r\n    return axios.post(`/post/${data.postId}/comment`, data)\r\n}\r\n\r\nfunction* addComment(action) {\r\n    try {\r\n        const result = yield call(addCommentAPI, action.data)\r\n        yield put({\r\n            type: ADD_COMMENT_SUCCESS,\r\n            data: result.data\r\n        });\r\n    } catch (err) {\r\n        yield put({\r\n            type: ADD_COMMENT_FAILURE,\r\n            data: err.response.data\r\n        });\r\n    }\r\n}\r\n\r\nfunction loadPostsAPI(data) {\r\n    return axios.get('/posts', data);\r\n}\r\n\r\nfunction* loadPosts(action) {\r\n    try {\r\n        const result = yield call(loadPostsAPI, action.data);\r\n        yield put({\r\n            type: LOAD_POSTS_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: LOAD_POSTS_FAILURE,\r\n            data: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction likePostAPI(data) {\r\n    return axios.patch(`/post/${data}/like `, data);\r\n}\r\n\r\nfunction* likePost(action) {\r\n    try {\r\n        const result = yield call(likePostAPI, action.data);\r\n        yield put({\r\n            type: LIKE_POST_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: LIKE_POST_FAILURE,\r\n            data: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction UnLikePostAPI(data) {\r\n    return axios.delete(`/post/${data}/like`);\r\n}\r\n\r\nfunction* UnLikePost(action) {\r\n    try {\r\n        const result = yield call(UnLikePostAPI, action.data);\r\n        yield put({\r\n            type: UNLIKE_POST_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: UNLIKE_POST_FAILURE,\r\n            data: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction* watchLoadPosts() {\r\n    yield throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\r\n}\r\n\r\nfunction* watchAddPost() {\r\n    yield takeLatest(ADD_POST_REQUEST, addPost)\r\n}\r\n\r\nfunction* watchRemovePost() {\r\n    yield takeLatest(REMOVE_POST_REQUEST, removePost)\r\n}\r\n\r\nfunction* watchCommentPost() {\r\n    yield takeLatest(ADD_COMMENT_REQUEST, addComment)\r\n}\r\n\r\nfunction* watchLikePost() {\r\n    yield takeLatest(LIKE_POST_REQUEST, likePost)\r\n}\r\n\r\nfunction* watchUnLiketPost() {\r\n    yield takeLatest(UNLIKE_POST_REQUEST, UnLikePost)\r\n}\r\n\r\n\r\nexport default function* postSaga() {\r\n    yield all([\r\n        fork(watchAddPost),\r\n        fork(watchCommentPost),\r\n        fork(watchRemovePost),\r\n        fork(watchLoadPosts),\r\n        fork(watchLikePost),\r\n        fork(watchUnLiketPost),\r\n    ]);\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}