{"ast":null,"code":"import { delay, all, fork, takeLatest, put } from \"redux-saga/effects\";\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE } from '../reducers/post';\nimport { ADD_POST_TO_ME } from \"../reducers/user\";\nimport shortId from 'shortid';\n\nfunction addPostAPI(data) {\n  return axios.post('/api/addPost', data);\n}\n\nfunction* addPost(action) {\n  try {\n    // const result = yield call(addPostAPI, action.data)\n    yield delay(1000);\n    const id = shortId.generate();\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: {\n        id,\n        content: action.data\n      }\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: id\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction removePostAPI(data) {\n  return axios.post('/api/addPost', data);\n}\n\nfunction* removePost(action) {\n  try {\n    // const result = yield call(addPostAPI, action.data)\n    yield delay(1000);\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: action.data\n    });\n    yield put({\n      type: REMOVE_POST_TO_ME,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction addCommentAPI(data) {\n  return axios.post('/api/addPost', data);\n}\n\nfunction* addComment(action) {\n  try {\n    // const result = yield call(addPostAPI, action.data)\n    yield delay(1000);\n    yield alert(action.data);\n    yield console.log(action.data);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction* watchCommentPost() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchCommentPost), fork(watchRemovePost)]);\n}","map":{"version":3,"names":["delay","all","fork","takeLatest","put","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","ADD_POST_TO_ME","shortId","addPostAPI","data","axios","post","addPost","action","id","generate","type","content","err","response","removePostAPI","removePost","REMOVE_POST_TO_ME","addCommentAPI","addComment","alert","console","log","watchAddPost","watchRemovePost","watchCommentPost","postSaga"],"sources":["C:/Users/user/Desktop/react-nodebird/prepare/front/sagas/post.js"],"sourcesContent":["import { delay, all, fork, takeLatest, put } from \"redux-saga/effects\";\r\nimport {\r\n    ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE,\r\n    REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE,\r\n    ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE,\r\n} from '../reducers/post'\r\n\r\nimport { ADD_POST_TO_ME } from \"../reducers/user\";\r\n\r\nimport shortId from 'shortid';\r\n\r\nfunction addPostAPI(data) {\r\n    return axios.post('/api/addPost', data)\r\n}\r\n\r\nfunction* addPost(action) {\r\n    try {\r\n        // const result = yield call(addPostAPI, action.data)\r\n        yield delay(1000)\r\n        const id = shortId.generate();\r\n        yield put({\r\n            type: ADD_POST_SUCCESS,\r\n            data: { id, content: action.data }\r\n        })\r\n        yield put({\r\n            type: ADD_POST_TO_ME,\r\n            data: id\r\n        })\r\n    } catch (err) {\r\n        yield put({\r\n            type: ADD_POST_FAILURE,\r\n            data: err.response.data\r\n        });\r\n    }\r\n}\r\n\r\nfunction removePostAPI(data) {\r\n    return axios.post('/api/addPost', data)\r\n}\r\n\r\nfunction* removePost(action) {\r\n    try {\r\n        // const result = yield call(addPostAPI, action.data)\r\n        yield delay(1000)\r\n        yield put({\r\n            type: REMOVE_POST_SUCCESS,\r\n            data: action.data\r\n        })\r\n        yield put({\r\n            type: REMOVE_POST_TO_ME,\r\n            data: action.data\r\n        })\r\n    } catch (err) {\r\n        yield put({\r\n            type: REMOVE_POST_FAILURE,\r\n            data: err.response.data\r\n        });\r\n    }\r\n}\r\n\r\nfunction addCommentAPI(data) {\r\n    return axios.post('/api/addPost', data)\r\n}\r\n\r\nfunction* addComment(action) {\r\n    try {\r\n        // const result = yield call(addPostAPI, action.data)\r\n        yield delay(1000)\r\n        yield alert(action.data)\r\n        yield console.log(action.data)\r\n        yield put({\r\n            type: ADD_COMMENT_SUCCESS,\r\n            data: action.data\r\n        });\r\n    } catch (err) {\r\n        yield put({\r\n            type: ADD_COMMENT_FAILURE,\r\n            data: err.response.data\r\n        });\r\n    }\r\n}\r\n\r\nfunction* watchAddPost() {\r\n    yield takeLatest(ADD_POST_REQUEST, addPost)\r\n}\r\n\r\nfunction* watchRemovePost() {\r\n    yield takeLatest(REMOVE_POST_REQUEST, removePost)\r\n}\r\n\r\nfunction* watchCommentPost() {\r\n    yield takeLatest(ADD_COMMENT_REQUEST, addComment)\r\n}\r\n\r\n\r\nexport default function* postSaga() {\r\n    yield all([\r\n        fork(watchAddPost),\r\n        fork(watchCommentPost),\r\n        fork(watchRemovePost),\r\n    ]);\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}