{"ast":null,"code":"import { delay, all, fork, takeLatest, put, throttle } from \"redux-saga/effects\";\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, LOAD_POSTS_FAILURE, getDemmuyPost } from '../reducers/post';\nimport { ADD_POST_TO_ME, REMOVE_POST_TO_ME } from \"../reducers/user\";\nimport shortId from 'shortid';\n\nfunction addPostAPI(data) {\n  return axios.post('/api/addPost', data);\n}\n\nfunction* addPost(action) {\n  try {\n    yield call(addPostAPI, action.data);\n    const id = shortId.generate();\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: {\n        id,\n        content: action.data\n      }\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: id\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction removePostAPI(data) {\n  return axios.post('/api/addPost', data);\n}\n\nfunction* removePost(action) {\n  try {\n    // const result = yield call(addPostAPI, action.data)\n    yield delay(1000);\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: action.data\n    });\n    yield put({\n      type: REMOVE_POST_TO_ME,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction addCommentAPI(data) {\n  return axios.post('/api/addPost', data);\n}\n\nfunction* addComment(action) {\n  try {\n    // const result = yield call(addPostAPI, action.data)\n    yield delay(1000);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction loadPostsAPI(data) {\n  return axios.get('/api/posts', data);\n}\n\nfunction* loadPosts(action) {\n  try {\n    // const result = yield call(loadPostsAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: LOAD_POSTS_SUCCESS,\n      data: getDemmuyPost(10)\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LOAD_POSTS_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction* watchLoadPosts() {\n  yield throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction* watchCommentPost() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchCommentPost), fork(watchRemovePost), fork(watchLoadPosts)]);\n}","map":{"version":3,"names":["delay","all","fork","takeLatest","put","throttle","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","getDemmuyPost","ADD_POST_TO_ME","REMOVE_POST_TO_ME","shortId","addPostAPI","data","axios","post","addPost","action","call","id","generate","type","content","err","response","removePostAPI","removePost","addCommentAPI","addComment","loadPostsAPI","get","loadPosts","console","error","watchLoadPosts","watchAddPost","watchRemovePost","watchCommentPost","postSaga"],"sources":["C:/Users/user/Desktop/react-nodebird/prepare/front/sagas/post.js"],"sourcesContent":["import { delay, all, fork, takeLatest, put, throttle } from \"redux-saga/effects\";\r\nimport {\r\n    ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE,\r\n    REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE,\r\n    ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE,\r\n    LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, LOAD_POSTS_FAILURE, getDemmuyPost\r\n} from '../reducers/post'\r\n\r\nimport { ADD_POST_TO_ME, REMOVE_POST_TO_ME } from \"../reducers/user\";\r\n\r\nimport shortId from 'shortid';\r\n\r\nfunction addPostAPI(data) {\r\n    return axios.post('/api/addPost', data)\r\n}\r\n\r\nfunction* addPost(action) {\r\n    try {\r\n        yield call(addPostAPI, action.data)\r\n        const id = shortId.generate();\r\n        yield put({\r\n            type: ADD_POST_SUCCESS,\r\n            data: { id, content: action.data }\r\n        })\r\n        yield put({\r\n            type: ADD_POST_TO_ME,\r\n            data: id\r\n        })\r\n    } catch (err) {\r\n        yield put({\r\n            type: ADD_POST_FAILURE,\r\n            data: err.response.data\r\n        });\r\n    }\r\n}\r\n\r\nfunction removePostAPI(data) {\r\n    return axios.post('/api/addPost', data)\r\n}\r\n\r\nfunction* removePost(action) {\r\n    try {\r\n        // const result = yield call(addPostAPI, action.data)\r\n        yield delay(1000)\r\n        yield put({\r\n            type: REMOVE_POST_SUCCESS,\r\n            data: action.data\r\n        })\r\n        yield put({\r\n            type: REMOVE_POST_TO_ME,\r\n            data: action.data\r\n        })\r\n    } catch (err) {\r\n        yield put({\r\n            type: REMOVE_POST_FAILURE,\r\n            data: err.response.data\r\n        });\r\n    }\r\n}\r\n\r\nfunction addCommentAPI(data) {\r\n    return axios.post('/api/addPost', data)\r\n}\r\n\r\nfunction* addComment(action) {\r\n    try {\r\n        // const result = yield call(addPostAPI, action.data)\r\n        yield delay(1000)\r\n        yield put({\r\n            type: ADD_COMMENT_SUCCESS,\r\n            data: action.data\r\n        });\r\n    } catch (err) {\r\n        yield put({\r\n            type: ADD_COMMENT_FAILURE,\r\n            data: err.response.data\r\n        });\r\n    }\r\n}\r\n\r\nfunction loadPostsAPI(data) {\r\n    return axios.get('/api/posts', data);\r\n}\r\n\r\nfunction* loadPosts(action) {\r\n    try {\r\n        // const result = yield call(loadPostsAPI, action.data);\r\n        yield delay(1000);\r\n        yield put({\r\n            type: LOAD_POSTS_SUCCESS,\r\n            data: getDemmuyPost(10),\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: LOAD_POSTS_FAILURE,\r\n            data: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction* watchLoadPosts() {\r\n    yield throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\r\n}\r\n\r\nfunction* watchAddPost() {\r\n    yield takeLatest(ADD_POST_REQUEST, addPost)\r\n}\r\n\r\nfunction* watchRemovePost() {\r\n    yield takeLatest(REMOVE_POST_REQUEST, removePost)\r\n}\r\n\r\nfunction* watchCommentPost() {\r\n    yield takeLatest(ADD_COMMENT_REQUEST, addComment)\r\n}\r\n\r\n\r\nexport default function* postSaga() {\r\n    yield all([\r\n        fork(watchAddPost),\r\n        fork(watchCommentPost),\r\n        fork(watchRemovePost),\r\n        fork(watchLoadPosts),\r\n    ]);\r\n}"],"mappings":"AAAA,SAASA,KAAT,EAAgBC,GAAhB,EAAqBC,IAArB,EAA2BC,UAA3B,EAAuCC,GAAvC,EAA4CC,QAA5C,QAA4D,oBAA5D;AACA,SACIC,gBADJ,EACsBC,gBADtB,EACwCC,gBADxC,EAEIC,mBAFJ,EAEyBC,mBAFzB,EAE8CC,mBAF9C,EAGIC,mBAHJ,EAGyBC,mBAHzB,EAG8CC,mBAH9C,EAIIC,kBAJJ,EAIwBC,kBAJxB,EAI4CC,kBAJ5C,EAIgEC,aAJhE,QAKO,kBALP;AAOA,SAASC,cAAT,EAAyBC,iBAAzB,QAAkD,kBAAlD;AAEA,OAAOC,OAAP,MAAoB,SAApB;;AAEA,SAASC,UAAT,CAAoBC,IAApB,EAA0B;EACtB,OAAOC,KAAK,CAACC,IAAN,CAAW,cAAX,EAA2BF,IAA3B,CAAP;AACH;;AAED,UAAUG,OAAV,CAAkBC,MAAlB,EAA0B;EACtB,IAAI;IACA,MAAMC,IAAI,CAACN,UAAD,EAAaK,MAAM,CAACJ,IAApB,CAAV;IACA,MAAMM,EAAE,GAAGR,OAAO,CAACS,QAAR,EAAX;IACA,MAAM1B,GAAG,CAAC;MACN2B,IAAI,EAAExB,gBADA;MAENgB,IAAI,EAAE;QAAEM,EAAF;QAAMG,OAAO,EAAEL,MAAM,CAACJ;MAAtB;IAFA,CAAD,CAAT;IAIA,MAAMnB,GAAG,CAAC;MACN2B,IAAI,EAAEZ,cADA;MAENI,IAAI,EAAEM;IAFA,CAAD,CAAT;EAIH,CAXD,CAWE,OAAOI,GAAP,EAAY;IACV,MAAM7B,GAAG,CAAC;MACN2B,IAAI,EAAEvB,gBADA;MAENe,IAAI,EAAEU,GAAG,CAACC,QAAJ,CAAaX;IAFb,CAAD,CAAT;EAIH;AACJ;;AAED,SAASY,aAAT,CAAuBZ,IAAvB,EAA6B;EACzB,OAAOC,KAAK,CAACC,IAAN,CAAW,cAAX,EAA2BF,IAA3B,CAAP;AACH;;AAED,UAAUa,UAAV,CAAqBT,MAArB,EAA6B;EACzB,IAAI;IACA;IACA,MAAM3B,KAAK,CAAC,IAAD,CAAX;IACA,MAAMI,GAAG,CAAC;MACN2B,IAAI,EAAErB,mBADA;MAENa,IAAI,EAAEI,MAAM,CAACJ;IAFP,CAAD,CAAT;IAIA,MAAMnB,GAAG,CAAC;MACN2B,IAAI,EAAEX,iBADA;MAENG,IAAI,EAAEI,MAAM,CAACJ;IAFP,CAAD,CAAT;EAIH,CAXD,CAWE,OAAOU,GAAP,EAAY;IACV,MAAM7B,GAAG,CAAC;MACN2B,IAAI,EAAEpB,mBADA;MAENY,IAAI,EAAEU,GAAG,CAACC,QAAJ,CAAaX;IAFb,CAAD,CAAT;EAIH;AACJ;;AAED,SAASc,aAAT,CAAuBd,IAAvB,EAA6B;EACzB,OAAOC,KAAK,CAACC,IAAN,CAAW,cAAX,EAA2BF,IAA3B,CAAP;AACH;;AAED,UAAUe,UAAV,CAAqBX,MAArB,EAA6B;EACzB,IAAI;IACA;IACA,MAAM3B,KAAK,CAAC,IAAD,CAAX;IACA,MAAMI,GAAG,CAAC;MACN2B,IAAI,EAAElB,mBADA;MAENU,IAAI,EAAEI,MAAM,CAACJ;IAFP,CAAD,CAAT;EAIH,CAPD,CAOE,OAAOU,GAAP,EAAY;IACV,MAAM7B,GAAG,CAAC;MACN2B,IAAI,EAAEjB,mBADA;MAENS,IAAI,EAAEU,GAAG,CAACC,QAAJ,CAAaX;IAFb,CAAD,CAAT;EAIH;AACJ;;AAED,SAASgB,YAAT,CAAsBhB,IAAtB,EAA4B;EACxB,OAAOC,KAAK,CAACgB,GAAN,CAAU,YAAV,EAAwBjB,IAAxB,CAAP;AACH;;AAED,UAAUkB,SAAV,CAAoBd,MAApB,EAA4B;EACxB,IAAI;IACA;IACA,MAAM3B,KAAK,CAAC,IAAD,CAAX;IACA,MAAMI,GAAG,CAAC;MACN2B,IAAI,EAAEf,kBADA;MAENO,IAAI,EAAEL,aAAa,CAAC,EAAD;IAFb,CAAD,CAAT;EAIH,CAPD,CAOE,OAAOe,GAAP,EAAY;IACVS,OAAO,CAACC,KAAR,CAAcV,GAAd;IACA,MAAM7B,GAAG,CAAC;MACN2B,IAAI,EAAEd,kBADA;MAENM,IAAI,EAAEU,GAAG,CAACC,QAAJ,CAAaX;IAFb,CAAD,CAAT;EAIH;AACJ;;AAED,UAAUqB,cAAV,GAA2B;EACvB,MAAMvC,QAAQ,CAAC,IAAD,EAAOU,kBAAP,EAA2B0B,SAA3B,CAAd;AACH;;AAED,UAAUI,YAAV,GAAyB;EACrB,MAAM1C,UAAU,CAACG,gBAAD,EAAmBoB,OAAnB,CAAhB;AACH;;AAED,UAAUoB,eAAV,GAA4B;EACxB,MAAM3C,UAAU,CAACM,mBAAD,EAAsB2B,UAAtB,CAAhB;AACH;;AAED,UAAUW,gBAAV,GAA6B;EACzB,MAAM5C,UAAU,CAACS,mBAAD,EAAsB0B,UAAtB,CAAhB;AACH;;AAGD,eAAe,UAAUU,QAAV,GAAqB;EAChC,MAAM/C,GAAG,CAAC,CACNC,IAAI,CAAC2C,YAAD,CADE,EAEN3C,IAAI,CAAC6C,gBAAD,CAFE,EAGN7C,IAAI,CAAC4C,eAAD,CAHE,EAIN5C,IAAI,CAAC0C,cAAD,CAJE,CAAD,CAAT;AAMH"},"metadata":{},"sourceType":"module"}